#!/bin/bash

# Secure WireGuard server installer for Debian, Ubuntu, CentOS, Fedora and Arch Linux
# https://github.com/angristan/wireguard-install

RED='\033[0;31m'
ORANGE='\033[0;33m'
NC='\033[0m'
CLIENT_WG_CONF=wg-wakoma

function isRoot() {
    if [ "${EUID}" -ne 0 ]; then
        echo "You need to run this script as root"
        exit 1
    fi
}

function checkVirt() {
    if [ "$(systemd-detect-virt)" == "openvz" ]; then
        echo "OpenVZ is not supported"
        exit 1
    fi

    if [ "$(systemd-detect-virt)" == "lxc" ]; then
        echo "LXC is not supported (yet)."
        echo "WireGuard can technically run in an LXC container,"
        echo "but the kernel module has to be installed on the host,"
        echo "the container has to be run with some specific parameters"
        echo "and only the tools need to be installed in the container."
        exit 1
    fi
}

function checkOS() {
    # Check OS version
    if [[ -e /etc/debian_version ]]; then
        source /etc/os-release
        OS="${ID}" # debian or ubuntu
        if [[ ${ID} == "debian" || ${ID} == "raspbian" ]]; then
            if [[ ${VERSION_ID} -lt 10 ]]; then
                echo "Your version of Debian (${VERSION_ID}) is not supported. Please use Debian 10 Buster or later"
                exit 1
            fi
            OS=debian # overwrite if raspbian
        fi
    elif [[ -e /etc/fedora-release ]]; then
        source /etc/os-release
        OS="${ID}"
    elif [[ -e /etc/centos-release ]]; then
        source /etc/os-release
        OS=centos
    elif [[ -e /etc/arch-release ]]; then
        OS=arch
    else
        echo "Looks like you aren't running this installer on a Debian, Ubuntu, Fedora, CentOS or Arch Linux system"
        exit 1
    fi
}

function initialCheck() {
    isRoot
    checkVirt
    checkOS
}

function installPackage() {
    # Install WireGuard tools and module
    if [[ ${OS} == 'ubuntu' ]] || [[ ${OS} == 'debian' && ${VERSION_ID} -gt 10 ]]; then
        apt-get update
        apt-get install -y wireguard iptables resolvconf qrencode
    elif [[ ${OS} == 'debian' ]]; then
        if ! grep -rqs "^deb .* buster-backports" /etc/apt/; then
            echo "deb http://deb.debian.org/debian buster-backports main" >/etc/apt/sources.list.d/backports.list
            apt-get update
        fi
        apt update
        apt-get install -y iptables resolvconf qrencode
        apt-get install -y -t buster-backports wireguard
    elif [[ ${OS} == 'fedora' ]]; then
        if [[ ${VERSION_ID} -lt 32 ]]; then
            dnf install -y dnf-plugins-core
            dnf copr enable -y jdoss/wireguard
            dnf install -y wireguard-dkms
        fi
        dnf install -y wireguard-tools iptables qrencode
    elif [[ ${OS} == 'centos' ]]; then
        yum -y install epel-release elrepo-release
        if [[ ${VERSION_ID} -eq 7 ]]; then
            yum -y install yum-plugin-elrepo
        fi
        yum -y install kmod-wireguard wireguard-tools iptables qrencode
    elif [[ ${OS} == 'arch' ]]; then
        pacman -S --needed --noconfirm wireguard-tools qrencode
    fi

    # Make sure the directory exists (this does not seem the be the case on fedora)
    mkdir /etc/wireguard >/dev/null 2>&1

    chmod 600 -R /etc/wireguard/

}

function downloadWakomaConf() {
    # This function downloads the conf necessary to connect to VPN, and the ssh authorized keys to allow Wakoma devs access
    until [[ ${NEXTCLOUD_USER} =~ ^[a-zA-Z0-9_-]+$ ]]; do
        read -rp "Wakoma Nextcloud username: " -e NEXTCLOUD_USER
    done
    until [[ ${NEXTCLOUD_APIKEY} =~ ^[a-zA-Z0-9_-]+$ ]]; do
        read -rp "Wakoma Nextcloud API key: " -e NEXTCLOUD_APIKEY
    done
    NEXTCLOUD_USER_URL=https://drive.wakoma.net/remote.php/dav/files/${NEXTCLOUD_USER}
    curl -u${NEXTCLOUD_USER}:${NEXTCLOUD_APIKEY} ${NEXTCLOUD_USER_URL}/wg0-client.conf --output /etc/wireguard/${CLIENT_WG_CONF}.conf
    curl -u${NEXTCLOUD_USER}:${NEXTCLOUD_APIKEY} ${NEXTCLOUD_USER_URL}/authorized_keys --output /root/.ssh/authorized_keys
    chmod 0600 /etc/wireguard/${CLIENT_WG_CONF}.conf  /root/.ssh/authorized_keys
}

function installWireGuard() {
    installPackage
    downloadWakomaConf
    sysctl --system
    systemctl start "wg-quick@${CLIENT_WG_CONF}"
    systemctl enable "wg-quick@${CLIENT_WG_CONF}"

    # Check if WireGuard is running
    systemctl is-active --quiet "wg-quick@${CLIENT_WG_CONF}"
    WG_RUNNING=$?

    # WireGuard might not work if we updated the kernel. Tell the user to reboot
    if [[ ${WG_RUNNING} -ne 0 ]]; then
        echo -e "\n${RED}WARNING: WireGuard does not seem to be running.${NC}"
        echo -e "${ORANGE}You can check if WireGuard is running with: systemctl status wg-quick@${CLIENT_WG_CONF}${NC}"
    fi
}

# Check for root, virt, OS...
initialCheck

# Check if WireGuard is already installed and load params
if [[ -e /etc/wireguard/params ]]; then
    echo "It looks like WireGuard is already installed."
else
    installWireGuard
fi
