---
- name: Deploy Services
  hosts: all
  vars_prompt:
    - name: nextcloud_user
      prompt: Enter your Nextcloud username
      private: no
    - name: nextcloud_api_token
      prompt: Enter your Nextcloud API token
  tasks:

    - name: Register primary user's details
      user:
        name: "{{ primary_ssh_user }}"
      register: primary_ssh_user_params

    - name: Set facts
      set_fact:
        git_dest: "{{ primary_ssh_user_params.home }}/{{ repo_name }}"

    - name: Checkout git repo instance to main branch and pull
      git:
        repo: "{{ git_repo }}"
        dest: "{{ git_dest }}"
        version: "{{ git_version }}"
      vars:
        git_repo: "https://github.com/{{ repo_owner }}/{{ repo_name }}.git"
        git_version: "{{ repo_branch }}"

    - name: fetch file .env from nextcloud
      markuman.nextcloud.file:
        mode: get
        src: .envrc
        dest: "{{ git_dest }}/.envrc"
        overwritten: different
        host: drive.wakoma.net
        user: "{{ nextcloud_user }}"
        api_token: "{{ nextcloud_api_token }}"

    - name: Get .envrc file content
      shell: . {{ git_dest }}/.envrc && env
      register: updated_envrc_out

    - name: Parse environment
      set_fact:
        updated_envrc: "{{ ('{' + updated_envrc_out.stdout_lines | map('regex_replace', '([^=]*)=(.*)', '\"\\1\": \"\\2\"') | join(',') + '}') | from_json }}"
    

    - name: Make acme certs directory if it does not yet exist
      file:
        path: "{{ updated_envrc.ACME_CERTS_DIR }}"
        state: directory

    - name: fetch file certs from nextcloud (TODO In future we want to mount nextcloud drive so that certs can be updated)
      markuman.nextcloud.file:
        mode: get
        src: "{{ updated_envrc.ACME_DOMAIN }}"
        dest: "{{ updated_envrc.ACME_CERTS_DIR }}"
        overwritten: different
        host: drive.wakoma.net
        user: "{{ nextcloud_user }}"
        api_token: "{{ nextcloud_api_token }}"

    - name: Allow .envrc
      shell: "direnv allow ."
      args:
        chdir: "{{ git_dest }}"

    - name: Docker-compose pull
      shell: "direnv exec . dc pull"
      args:
        chdir: "{{ git_dest }}"

    - name: Generate Kiwix Library file
      shell: "direnv exec . config/services/kiwix/generate-library.sh"
      args:
        chdir: "{{ git_dest }}"

    - name: Docker-compose up mariadb
      shell: "direnv exec . dc up -d mariadb"
      args:
        chdir: "{{ git_dest }}"

    - name: Init databases
      shell: "direnv exec . config/services/mariadb/scripts/init-databases.sh"
      args:
        chdir: "{{ git_dest }}"

    - name: Docker-compose up
      shell: "direnv exec . dc up -d"
      args:
        chdir: "{{ git_dest }}"
