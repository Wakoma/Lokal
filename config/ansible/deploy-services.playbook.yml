---
- name: Deploy Services
  hosts: all
  vars_prompt:
    - name: nextcloud_user
      prompt: Enter your Nextcloud username
      private: no
    - name: nextcloud_api_token
      prompt: Enter your Nextcloud API token
  tasks:

    - name: Register primary user's details
      user:
        name: "{{ primary_ssh_user }}"
      register: primary_ssh_user_params

    - name: Set facts
      set_fact:
        git_dest: "{{ primary_ssh_user_params.home }}/{{ repo_name }}"

    - name: Checkout git repo instance to main branch and pull
      git:
        repo: "{{ git_repo }}"
        dest: "{{ git_dest }}"
        version: "{{ git_version }}"
      vars:
        git_repo: "https://github.com/{{ repo_owner }}/{{ repo_name }}.git"
        git_version: "{{ repo_branch }}"

    - name: fetch file .env from nextcloud
      markuman.nextcloud.file:
        mode: get
        src: .envrc
        dest: "{{ git_dest }}/.envrc"
        overwritten: different
        host: drive.wakoma.net
        user: "{{ nextcloud_user }}"
        api_token: "{{ nextcloud_api_token }}"

    - name: Get .envrc file content
      shell: . {{ git_dest }}/.envrc && env
      register: updated_envrc_out

    - name: Parse environment
      set_fact:
        updated_envrc: "{{ ('{' + updated_envrc_out.stdout_lines | map('regex_replace', '([^=]*)=(.*)', '\"\\1\": \"\\2\"') | join(',') + '}') | from_json }}"
    
    - name: Set facts
      set_fact:
        server_is_live: "{{ updated_envrc.SERVER_IS_LIVE | default(false) }}"

    - name: Make acme certs directory if it does not yet exist
      become: yes
      become_user: root
      file:
        path: "{{ updated_envrc.ACME_CERTS_DIR }}"
        state: directory
        owner: root
        group: root
        mode: 0700
      when: not server_is_live

    - name: fetch file certs from nextcloud (TODO In future we want to mount nextcloud drive so that certs can be updated)
      become: yes
      become_user: root
      markuman.nextcloud.file:
        mode: get
        src: "{{ updated_envrc.ACME_DOMAIN }}/{{ item }}"
        dest: "{{ updated_envrc.ACME_CERTS_DIR }}/{{ item }}"
        overwritten: different
        host: drive.wakoma.net
        user: "{{ nextcloud_user }}"
        api_token: "{{ nextcloud_api_token }}"
      with_items:
        - "{{ updated_envrc.ACME_DOMAIN }}.cer"
        - "{{ updated_envrc.ACME_DOMAIN }}.key"
      when: not server_is_live

    - name: Change file ownership, group and permissions
      become: yes
      become_user: root
      ansible.builtin.file:
        path: "{{ updated_envrc.ACME_CERTS_DIR }}/{{ item }}"
        owner: root
        group: root
        mode: 0600
      with_items:
        - "{{ updated_envrc.ACME_DOMAIN }}.cer"
        - "{{ updated_envrc.ACME_DOMAIN }}.key"
      when: not server_is_live

    - name: fetch file wg0-client.conf from nextcloud
      become: yes
      markuman.nextcloud.file:
        mode: get
        src: wg0-client.conf
        dest: /etc/wireguard/wg0-client.conf
        overwritten: different
        host: drive.wakoma.net
        user: "{{ nextcloud_user }}"
        api_token: "{{ nextcloud_api_token }}"
      register: wg_client_config_output
      failed_when: wg_client_config_output.rc | default(0) != 0 and 'does not exist' not in wg_client_config_output.exception | default('')

    - name: Decide if wireguard should be configured
      set_fact:
        configure_wireguard: "{{ wg_client_config_output.rc | default(0) == 0 }}"

    - name: Change file ownership, group and permissions of wg0-client.conf
      become: yes
      become_user: root
      ansible.builtin.file:
        path: /etc/wireguard/wg0-client.conf
        owner: root
        group: root
        mode: 0600
      when: configure_wireguard

    - name: Create and enable a systemctl config for wireguard
      become: yes
      systemd:
        name: wg-quick@wg0-client.service
        enabled: yes
        state: started
      when: configure_wireguard

    - name: Allow .envrc
      shell: "direnv allow ."
      args:
        chdir: "{{ git_dest }}"

    - name: Docker-compose pull
      shell: "direnv exec . dc pull"
      args:
        chdir: "{{ git_dest }}"

    - name: Generate Kiwix Library file
      shell: "direnv exec . config/services/kiwix/generate-library.sh"
      args:
        chdir: "{{ git_dest }}"

    - name: Docker-compose up mariadb
      shell: "direnv exec . dc up -d mariadb"
      args:
        chdir: "{{ git_dest }}"

    - name: Init databases
      shell: "direnv exec . config/services/mariadb/scripts/init-databases.sh"
      args:
        chdir: "{{ git_dest }}"

    - name: Docker-compose up
      shell: "direnv exec . dc up -d"
      args:
        chdir: "{{ git_dest }}"
