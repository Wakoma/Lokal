# This playbook must be run as root (by specifiyng -e ansible_user=root)
# The aim is to create the application user under which Lokal will run
# This user will have the same SSH setting as root and should be used
# for further connections (and mainly running THE playbook.yml)
# Usage: ansible-playbook -i hosts/your-server -e "app_user=ubuntu" -e "ansible_user=root" utils/playbooks/create-lokal-user.yml
---
- name: Install and launch Wakoma Lokal
  hosts: all
  tasks:
  - name: Ensure primary user is created and added to sudo group
    user:
      name: "{{ app_user }}"
      shell: /bin/bash
      groups:
        - sudo
      append: yes
      createhome: yes
    register: app_user_params

  - name: Ensure sudo users can issue commands without specifying password
    copy:
      content: '%sudo ALL=(ALL:ALL) NOPASSWD:ALL'
      dest: /etc/sudoers.d/sudo
      mode: 0600

  - name: Register root ssh user's details
    user:
      name: "{{ ansible_user }}"
    register: ansible_user_params
    when: "{{ setup_ssh | default(false) }}"

  - set_fact:
      authorized_keys_src: "{{ ansible_user_params.home }}/.ssh/authorized_keys"
      authorized_keys_dest: "{{ app_user_params.home }}/.ssh/authorized_keys"
    when: "{{ setup_ssh | default(false) }}"

  - name: Harden ssh security
    lineinfile:
      dest: "/etc/ssh/sshd_config"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - regexp: '^#?PermitEmptyPasswords'
        line: 'PermitEmptyPasswords no'
      - regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'
      - regexp: '^(#\s*)?PasswordAuthentication '
        line: 'PasswordAuthentication no'
    when: "{{ setup_ssh | default(false) }}"

  - name: restart sshd
    service:
      name: ssh
      state: restarted
    when: "{{ setup_ssh | default(false) }}"

  - name: Ensure that the primary user's ssh directory exists
    file:
      path: "{{ app_user_params.home }}/.ssh"
      state: directory
      owner: "{{ app_user }}"
      group: "{{ app_user }}"
      mode: 0700
    when: "{{ setup_ssh | default(false) }}"

  - name: Ensure authorized_keys file is initiated for primary user
    copy:
      content: ""
      dest: "{{ app_user_params.home }}/.ssh/authorized_keys"
      group: "{{ app_user }}"
      owner: "{{ app_user }}"
      mode: 0600
    when: "{{ setup_ssh | default(false) }}"

  - name: Install sync_authorized_keys service unit file
    template:
      src: sync_authorized_keys.service.j2
      dest: /etc/systemd/system/sync_authorized_keys.service
    when: "{{ setup_ssh | default(false) }}"

  - name: Start/Enable sync_authorized_keys service unit file
    systemd:
      name: sync_authorized_keys.service
      enabled: yes
      state: started
    when: "{{ setup_ssh | default(false) }}"

  - name: "Make sure docker-compose is installed"
    package:
      name: docker-compose
      state: present

  - name: "Add current user to docker group"
    user:
      name: '{{ ansible_user }}'
      groups: docker
      append: yes
