version: "3.8"
services:
  ipfs-node:
    container_name: ipfs-node
    image: ipfs/go-ipfs:latest # TODO pin version
    networks:
      - traefik
      - ipfs
    restart: unless-stopped
    ports:
      - 4001:4001
      - 4001:4001/udp
    volumes:
      - {{app_root}}/node:/data/ipfs
    labels:
      traefik.enable: "true"
      traefik.http.routers.ipfs-node.entrypoints: websecure
      traefik.http.routers.ipfs-node.rule: HostRegexp(`{{subdomain_ipfs_node}}.{{domain}}`)
      traefik.http.routers.ipfs-node.tls: "true"
{% if users_ipfs is truthy %}
      traefik.http.routers.ipfs-node.middlewares: ipfs-node-auth
      traefik.http.middlewares.ipfs-node-auth.basicauth.users: {% for i in users_ipfs %}{{i.user}}:$$sha1$${{i.password|sha1}}{%if not loop.last%},{%endif%}{% endfor %}

{% endif %}
      traefik.http.routers.ipfs-node.service: ipfs-node
      traefik.http.services.ipfs-node.loadbalancer.server.port: 5001
{% if server_is_live %}
      traefik.http.routers.ipfs-node.tls.certresolver: {{cert_resolver}}
{% endif %}

  ipfs-cluster:
    container_name: ipfs-cluster
    image: ipfs/ipfs-cluster:latest # TODO pin version
    networks:
      - traefik
      - ipfs
    depends_on:
      - ipfs-node
    environment:
      CLUSTER_PEERNAME: ipfs-cluster
      CLUSTER_SECRET: {{cluster_secret_ipfs}} # TODO
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs-node/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: '*'
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9094
      #CLUSTER_RESTAPI_CORSALLOWEDMETHODS: GET, POST
      #CLUSTER_RESTAPI_CORSALLOWEDORIGINS: '*'
      CLUSTER_PINSVCAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9097
      #CLUSTER_PINSVCAPI_CORSALLOWEDMETHODS: GET, POST
      #CLUSTER_PINSVCAPI_CORSALLOWEDORIGINS: '*'
      CLUSTER_MONITORPINGINTERVAL: 2s # Speed up peer discovery
    volumes:
      - {{app_root}}/cluster:/data/ipfs-cluster
    labels:
      traefik.enable: "true"
      # describe traefik middlewares
      traefik.http.middlewares.strip-pinning-prefix.stripprefix.prefixes: /pinning

{% if users_ipfs is truthy %}
      traefik.http.routers.traefik.middlewares: ipfs-auth
      traefik.http.middlewares.ipfs-auth.basicauth.users: {%for i in users_ipfs%}{{i.user}}:$$sha1$${{i.password|sha1}}{%if not loop.last%},{%endif%}{%endfor%}
{% endif %}

      traefik.http.middlewares.corsheader.headers.accesscontrolallowmethods: "GET,POST,OPTIONS"
      traefik.http.middlewares.corsheader.headers.accesscontrolalloworiginlist: "https://agregoreweb.github.io"
      traefik.http.middlewares.corsheader.headers.accesscontrolallowcredentials: "true"
      traefik.http.middlewares.corsheader.headers.accesscontrolallowheaders: 'Content-Type,Content-Length,Range,Authorization'
{% if server_is_live %}
      traefik.http.routers.corsheader.tls.certresolver: {{cert_resolver}}
{% endif %}

      traefik.http.routers.corspreflight.entrypoints: websecure
      traefik.http.routers.corspreflight.rule: Host(`{{subdomain_ipfs_cluster}}.{{domain}}`) && Method(`OPTIONS`)
      traefik.http.routers.corspreflight.tls: "true"
      traefik.http.routers.corspreflight.middlewares: corsheader
      traefik.http.routers.corspreflight.service: corspreflight
      traefik.http.services.corspreflight.loadbalancer.server.port: 9094
{% if server_is_live %}
      traefik.http.routers.corspreflight.tls.certresolver: {{cert_resolver}}
{% endif %}

      traefik.http.routers.ipfs-cluster.entrypoints: websecure
      traefik.http.routers.ipfs-cluster.rule: Host(`{{subdomain_ipfs_cluster}}.{{domain}}`) && Method(`GET`, `POST`, `PUT`, `DELETE`, `PATCH`, `HEAD`)
      traefik.http.routers.ipfs-cluster.tls: "true"
      traefik.http.routers.ipfs-cluster.service: ipfs-cluster
      traefik.http.routers.ipfs-cluster.middlewares: ipfs-auth, corsheader
      traefik.http.services.ipfs-cluster.loadbalancer.server.port: 9094
{% if server_is_live %}
      traefik.http.routers.ipfs-cluster.tls.certresolver: {{cert_resolver}}
{% endif %}

      traefik.http.routers.ipfs-pinning.entrypoints: websecure
      traefik.http.routers.ipfs-pinning.rule: Host(`{{subdomain_ipfs_cluster}}.{{domain}}`) && PathPrefix(`/pinning/`) && Method(`GET`, `POST`, `PUT`, `DELETE`, `PATCH`)
      traefik.http.routers.ipfs-pinning.tls: "true"
      traefik.http.routers.ipfs-pinning.service: ipfs-pinning
      traefik.http.routers.ipfs-pinning.middlewares: ipfs-auth, corsheader, strip-pinning-prefix
      traefik.http.services.ipfs-pinning.loadbalancer.server.port: 9097
{% if server_is_live %}
      traefik.http.routers.ipfs-pinning.tls.certresolver: {{cert_resolver}}
{% endif %}


networks:
  ipfs:
    name: ipfs
  traefik:
    external: true
