version: "3.8"

networks:
  traefik:
    name: traefik
  mysql:
    name: mysql
  prometheus:
    name: prometheus
  mail:
    name: mail
  postgres:
    name: postgres

services:
{% if debug_smtp %}
  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    networks:
      - traefik
      - mail
    labels:
      traefik.enable: "true"
      traefik.http.routers.mailhog.entrypoints: websecure
      traefik.http.routers.mailhog.rule: Host(`{{subdomain_mailhog}}.{{domain}}`)
      traefik.http.routers.mailhog.tls: "true"
      traefik.http.services.mailhog.loadbalancer.server.port: 8025
{% if server_is_live %}
      traefik.http.routers.mailhog.tls.certresolver: {{cert_resolver}}
{% endif %}
{% if traefik_basicauth_users is truthy %}
      traefik.http.routers.mailhog.middlewares: traefik-auth
{% endif %}
    restart: unless-stopped
{% endif %}

  mariadb:
    container_name: {{mysql_host}}
    image: mariadb:10.5.8-focal
    user: "{{uid}}:{{gid}}"  # run the container service as app user (not root)
    environment:
      MYSQL_ROOT_PASSWORD: {{mysql_root_password}}
      MARIADB_MYSQL_LOCALHOST_USER: "true"
    ports:
    - '{{mysql_port}}:3306'  # necessary to manipulate mariadb locally
    networks:
    - mysql
    - prometheus
    healthcheck:
      test: mysql --protocol tcp -u root --password={{mysql_root_password}} -e "SELECT 1 FROM DUAL" mysql
      interval: 60s
      retries: 5
      start_period: 5s
      timeout: 1s
    restart: unless-stopped
    volumes:
    - {{project_root}}/base/mysql/data:/var/lib/mysql

  postgres:
    container_name: postgres
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: {{postgres_root_password}}
    ports:
    - '{{postgres_port}}:5432'
    networks:
    - postgres
    - prometheus
    restart: unless-stopped
    volumes:
    - {{project_root}}/base/postgres/data:/var/lib/postgresql/data

  grafana:
    container_name: grafana
    image: grafana/grafana:9.2.1
    user: "{{uid}}:{{gid}}"
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel,natel-discrete-panel,grafana-piechart-panel
#     GF_AUTH_DISABLE_LOGIN_FORM: "true"
#     GF_AUTH_ANONYMOUS_ENABLED: "true"
#     GF_AUTH_ANONYMOUS_ORG_NAME: Main Org.
#     GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
#     GF_USERS_ALLOW_SIGN_UP: "false"
#     GF_LOG_LEVEL: debug
    labels:
      traefik.enable: "true"
      traefik.http.routers.grafana.entrypoints: websecure
      traefik.http.routers.grafana.rule: Host(`{{subdomain_grafana}}.{{domain}}`)
      traefik.http.routers.grafana.tls: "true"
      traefik.http.services.grafana.loadbalancer.server.port: 3000
{% if server_is_live %}
      traefik.http.routers.grafana.tls.certresolver: {{cert_resolver}}
{% endif %}
    volumes:
      - {{project_root}}/base/grafana/data:/var/lib/grafana
    networks:
      - traefik
      - prometheus
      - mail
    restart: unless-stopped

  netdata:
    container_name: netdata
    user: "0:{{gid}}"
    cap_add:
    - SYS_PTRACE
    environment:
      PUID: '{{uid}}'
    hostname: {{subdomain_netdata}}.{{domain}}
    image: netdata/netdata:v1.28.0-amd64
    labels:
      traefik.enable: "true"
      traefik.http.routers.netdata.entrypoints: websecure
      traefik.http.routers.netdata.rule: Host(`{{subdomain_netdata}}.{{domain}}`)
      traefik.http.routers.netdata.tls: "true"
      traefik.http.services.netdata.loadbalancer.server.port: 19999
{% if traefik_basicauth_users is truthy %}
      traefik.http.routers.netdata.middlewares: traefik-auth
{% endif %}
{% if server_is_live %}
      traefik.http.routers.netdata.tls.certresolver: {{cert_resolver}}
{% endif %}
    networks:
      - traefik
      - prometheus
    restart: unless-stopped
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.39.1
    user: "{{uid}}:{{gid}}"
    labels:
      traefik.enable: "true"
      traefik.http.routers.prometheus.entrypoints: websecure
      traefik.http.routers.prometheus.rule: Host(`{{subdomain_prometheus}}.{{domain}}`)
      traefik.http.routers.prometheus.tls: "true"
      traefik.http.services.prometheus.loadbalancer.server.port: 9090
{% if traefik_basicauth_users is truthy %}
      traefik.http.routers.prometheus.middlewares: traefik-auth
{% endif %}
{% if server_is_live %}
      traefik.http.routers.prometheus.tls.certresolver: {{cert_resolver}}
{% endif %}
    networks:
    - traefik
    - prometheus
    restart: unless-stopped
    volumes:
    - {{project_root}}/base/prometheus/etc:/etc/prometheus
    - {{project_root}}/base/prometheus/data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml

  traefik:
    image: traefik:v2.9.1
    # cannot be simply app_user:app_user because of root:docker privileges on /var/run/docker.sock
    user: "{{uid}}:{{gid_docker}}"  # run the container service as app user (not root)
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.rule: Host(`{{subdomain_traefik}}.{{domain}}`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.tls: "true"
      traefik.http.services.traefik.loadbalancer.server.port: 8080
{% if traefik_basicauth_users is truthy %}
      traefik.http.routers.traefik.middlewares: traefik-auth
      traefik.http.middlewares.traefik-auth.basicauth.users: {{traefik_basicauth_users}}
{% endif %}
{% if server_is_live %}
      traefik.http.routers.traefik.tls.certresolver: {{cert_resolver}}
{% endif %}
    networks:
    - traefik
    - prometheus
    ports:
    - 80:80
    - 443:443
    restart: unless-stopped
    environment:
      CERT_RESOLVER: {{cert_resolver}}
{% if cert_resolver == "dns" and dns_provider == "namecheap" %}
      NAMECHEAP_API_USER: {{namecheap_api_user}}
      NAMECHEAP_API_KEY: {{namecheap_api_key}}
{% endif %}
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - "{{project_root}}/base/traefik/acme:/acme"
    - "{{project_root}}/base/traefik/certs:/certs"
    - "{{project_root}}/base/traefik/conf:/config"
    command:
    - --accessLog=true
    - --api.insecure=false
    - --api.dashboard=true
    - --api.debug=false
    - --certificatesResolvers.dns.acme.dnsChallenge.delayBeforeCheck=60
    - --certificatesResolvers.dns.acme.dnsChallenge.provider={{dns_provider}}
    - --certificatesResolvers.dns.acme.email={{email_acme}}
    - --certificatesResolvers.dns.acme.storage=/acme/acme.json
    - --certificatesresolvers.http.acme.httpchallenge=true
    - --certificatesresolvers.http.acme.httpchallenge.entrypoint=web
    - --certificatesresolvers.http.acme.email={{email_acme}}
    - --certificatesresolvers.http.acme.storage=/acme/acme.json
{% if staging_acme %}
    - --certificatesresolvers.http.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
{% endif %}
    - --certificatesresolvers.tls.acme.tlschallenge=true
    - --certificatesresolvers.tls.acme.email={{email_acme}}
    - --certificatesresolvers.tls.acme.storage=/acme/acme.json
{% if staging_acme %}
    - --certificatesresolvers.tls.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
{% endif %}
    - --entrypoints.web.address=:80
    - --entrypoints.websecure.address=:443
    - --entryPoints.metrics.address=:8082
    - --entrypoints.web.http.redirections.entryPoint.to=websecure
    - --entrypoints.web.http.redirections.entryPoint.scheme=https
    - --entrypoints.web.http.redirections.entrypoint.permanent=true
    - --log.level=WARNING
    - --metrics.prometheus=true
    - --metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000
    - --metrics.prometheus.addEntryPointsLabels=true
    - --metrics.prometheus.addServicesLabels=true
    - --metrics.prometheus.entryPoint=metrics
    - --providers.docker=true
    - --providers.docker.endpoint=unix:///var/run/docker.sock
    - --providers.docker.exposedbydefault=false
    - --providers.docker.network=traefik
    - --serversTransport.insecureSkipVerify=true
{% if static_certificate is truthy %}
    - --providers.file.directory=/config
    - --providers.file.watch=true
{% endif %}

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    user: "{{uid}}:{{gid_docker}}"
    restart: unless-stopped
    security_opt:
    - no-new-privileges:true
    volumes:
    - /etc/localtime:/etc/localtime:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - {{project_root}}/base/portainer/data:/data
    networks:
    - prometheus
    - traefik
    labels:
      traefik.enable: "true"
      traefik.http.routers.portainer.entrypoints: websecure
      traefik.http.routers.portainer.rule: Host(`{{subdomain_portainer}}.{{domain}}`)
      traefik.http.routers.portainer.tls: "true"
      traefik.http.services.portainer.loadbalancer.server.port: 9000
{% if server_is_live %}
      traefik.http.routers.portainer.tls.certresolver: {{cert_resolver}}
{% endif %}

  transmission:
    image: linuxserver/transmission
    container_name: transmission
#   no user: "{{uid}}:{{gid}}" because it drops the privileges itself
    environment:
      PUID: "{{uid}}"
      PGID: "{{gid}}"
      TZ: "{{tz}}"
    volumes:
    - {{project_root}}/base/transmission/config:/config
    - {{project_root}}/base/transmission/data:/downloads
    - {{project_root}}/base/transmission/watch:/watch
    ports:
    - 9091:9091
    - 51413:51413
    - 51413:51413/udp
    restart: unless-stopped
    depends_on:
    - traefik
    networks:
    - traefik
    labels:
      traefik.enable: "true"
      traefik.http.routers.transmission.entrypoints: websecure
      traefik.http.routers.transmission.rule: Host(`{{subdomain_transmission}}.{{domain}}`)
      traefik.http.routers.transmission.tls: "true"
      traefik.http.services.transmission.loadbalancer.server.port: 9091
{% if server_is_live %}
      traefik.http.routers.transmission.tls.certresolver: {{cert_resolver}}
{% endif %}
{% if traefik_basicauth_users is truthy %}
      traefik.http.routers.transmission.middlewares: traefik-auth
{% endif %}