version: "3.8"

networks:
  traefik:
    name: traefik
  mysql:
    name: mysql
  prometheus:
    name: prometheus
  # mail is not currently part of `base` package - so don't create the mail network here
  # mail:
  #   name: mail
  postgres:
    name: postgres

services:
  ldap:
    image: nitnelave/lldap:stable
    container_name: ldap
    #ports:
    #   - "3890:3890" # LDAP !only for localhost connections - don't allow on firewall!
    # don't even export. It is a pain in the ass to disable routing external traffic so this is easier
    #   - "17170:17170" # web front-end
    restart: always
    volumes:
      - "{{project_root}}/base/ldap/:/data/"
    environment:
      UID: "{{uid}}"
      GID: "{{gid}}"
      TZ: "{{tz}}"
    networks:
      - traefik
    labels:
      traefik.enable: "true"
      traefik.http.routers.ldap.entrypoints: websecure
      traefik.http.routers.ldap.rule: Host(`ldap.{{domain}}`)
      traefik.http.routers.ldap.tls: "true"
      traefik.http.services.ldap.loadbalancer.server.port: 17170
{% if ssl_use_acme %}
      traefik.http.routers.ldap.tls.certresolver: {{cert_resolver}}
{% endif %}

  mariadb:
    container_name: "{{mysql_host}}"
    image: mariadb:{{version_mariadb}}
    user: "{{uid}}:{{gid}}"  # run the container service as app user (not root)
    environment:
      MYSQL_ROOT_PASSWORD: "{{mysql_root_password}}"
      MARIADB_MYSQL_LOCALHOST_USER: "true"
    networks:
    - mysql
    - prometheus
    healthcheck:
      test: mysql --protocol tcp -u root --password={{mysql_root_password}} -e "SELECT 1 FROM DUAL" mysql
      interval: 60s
      retries: 5
      start_period: 5s
      timeout: 1s
    restart: unless-stopped
    volumes:
    - {{project_root}}/base/mariadb/:/var/lib/mysql/

  postgres:
    container_name: postgres
    image:  postgis/postgis:{{version_postgres}}
    user: "{{uid}}:{{gid}}"
    environment:
      POSTGRES_PASSWORD: "{{postgres_root_password}}"
    networks:
    - postgres
    restart: unless-stopped
    volumes:
    - {{project_root}}/base/postgres/:/var/lib/postgresql/data/

  prometheus:
    container_name: prometheus
    image: prom/prometheus:{{version_prometheus}}
    user: "{{uid}}:{{gid}}"
    labels:
      traefik.enable: "true"
      traefik.http.routers.prometheus.entrypoints: websecure
      traefik.http.routers.prometheus.rule: Host(`{{subdomain_prometheus}}.{{domain}}`)
      traefik.http.routers.prometheus.tls: "true"
      traefik.http.services.prometheus.loadbalancer.server.port: 9090
      traefik.http.routers.prometheus.middlewares: admin-auth@file
{% if ssl_use_acme %}
      traefik.http.routers.prometheus.tls.certresolver: {{cert_resolver}}
{% endif %}
    networks:
    - traefik
    - prometheus
    restart: unless-stopped
    volumes:
    - {{project_root}}/base/prometheus/etc/prometheus/:/etc/prometheus/
    - {{project_root}}/base/prometheus/data/:/prometheus/
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    user: "{{uid}}:{{gid_docker}}"
    restart: unless-stopped
    command: --admin-password '{{password_admin|password_hash('bcrypt')}}'
    security_opt:
    - no-new-privileges:true
    volumes:
    - /etc/localtime:/etc/localtime:ro
    - /var/run/docker.sock:/var/run/docker.sock
    - {{project_root}}/base/portainer/:/data/
    networks:
    - prometheus
    - traefik
    labels:
      traefik.enable: "true"
      traefik.http.routers.portainer.entrypoints: websecure
      traefik.http.routers.portainer.rule: Host(`{{subdomain_portainer}}.{{domain}}`)
      traefik.http.routers.portainer.tls: "true"
      traefik.http.services.portainer.loadbalancer.server.port: 9000
{% if ssl_use_acme %}
      traefik.http.routers.portainer.tls.certresolver: {{cert_resolver}}
{% endif %}

  traefik:
    image: traefik:{{version_traefik}}
    container_name: traefik
    # cannot be simply app_user:app_user because of root:docker privileges on /var/run/docker.sock
    user: "{{uid}}:{{gid_docker}}"  # run the container service as app user (not root)
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.rule: Host(`{{subdomain_traefik}}.{{domain}}`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.tls: "true"
      traefik.http.services.traefik.loadbalancer.server.port: 8080
      traefik.http.routers.traefik.middlewares: admin-auth@file
{% if ssl_use_acme %}
      traefik.http.routers.traefik.tls.certresolver: {{cert_resolver}}
{% endif %}
    networks:
    - traefik
    - prometheus
    ports:
    - 80:80
    - 443:443
    - 8448:8448
    restart: unless-stopped
    environment:
      CERT_RESOLVER: {{cert_resolver}}
{% if cert_resolver == "dns" and dns_provider == "namecheap" %}
      NAMECHEAP_API_USER: {{namecheap_api_user}}
      NAMECHEAP_API_KEY: {{namecheap_api_key}}
{% endif %}
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - "{{project_root}}/base/traefik/log:/var/log"  # used for fail2ban
    - "{{project_root}}/base/traefik/acme:/acme"
{% if not ssl_use_acme %}
    - {{project_root}}/{{domain}}.key:/certs/{{domain}}.key
    - {{project_root}}/{{domain}}.crt:/certs/{{domain}}.crt
{% endif %}
    - "{{project_root}}/base/traefik/conf:/config"
    command:
    - --accessLog=true
    - --api.insecure=false
    - --api.dashboard=true
    - --api.debug=false
{% if ssl_use_acme %}
    - --certificatesResolvers.dns.acme.dnsChallenge.delayBeforeCheck=60
    - --certificatesResolvers.dns.acme.dnsChallenge.provider={{dns_provider}}
    - --certificatesResolvers.dns.acme.email={{email_admin}}
    - --certificatesResolvers.dns.acme.storage=/acme/acme.json
    - --certificatesresolvers.http.acme.httpchallenge=true
    - --certificatesresolvers.http.acme.httpchallenge.entrypoint=web
    - --certificatesresolvers.http.acme.email={{email_admin}}
    - --certificatesresolvers.http.acme.storage=/acme/acme.json
{% if staging_acme %}
    - --certificatesresolvers.http.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
{% endif %}
    - --certificatesresolvers.tls.acme.tlschallenge=true
    - --certificatesresolvers.tls.acme.email={{email_admin}}
    - --certificatesresolvers.tls.acme.storage=/acme/acme.json
{% if staging_acme %}
    - --certificatesresolvers.tls.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
{% endif %}
{% endif %}
    - --entrypoints.web.address=:80
    - --entrypoints.websecure.address=:443/tcp
    - --entryPoints.federation.address=:8448
    - --entryPoints.metrics.address=:8082
    # - --entryPoints.smtp.address=:465  # do not bind those port - the mail container do this on its own
    # - --entryPoints.imap.address=:993  # do not bind those port - the mail container do this on its own
    - --entrypoints.web.http.redirections.entryPoint.to=websecure
    - --entrypoints.web.http.redirections.entryPoint.scheme=https
    - --entrypoints.web.http.redirections.entrypoint.permanent=true
    ## Please see the Forwarded Header Trust section of the Authelia Traefik Integration documentation.
    - --entryPoints.websecure.forwardedHeaders.trustedIPs=10.0.0.0/8,172.16.0.0/16,192.168.0.0/16,fc00::/7
    - --entryPoints.websecure.proxyProtocol.trustedIPs=10.0.0.0/8,172.16.0.0/16,192.168.0.0/16,fc00::/7
    - --entryPoints.websecure.forwardedHeaders.insecure=false
    - --entryPoints.websecure.proxyProtocol.insecure=false
    - --log.level=WARNING
    - --accessLog.filePath=/var/log/access.log
    - --accessLog.filters.statusCodes=400-505
    - --metrics.prometheus=true
    - --metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000
    - --metrics.prometheus.addEntryPointsLabels=true
    - --metrics.prometheus.addServicesLabels=true
    - --metrics.prometheus.entryPoint=metrics
    - --providers.docker=true
    - --providers.docker.endpoint=unix:///var/run/docker.sock
    - --providers.docker.exposedbydefault=false
    - --providers.docker.network=traefik
    - --serversTransport.insecureSkipVerify=true
    - --providers.file.directory=/config
    - --providers.file.watch=true

{% if ssl_use_acme %}
  dumper:
    image: ldez/traefik-certs-dumper:v2.8.1
    command: file --version v2 --watch --source /data/acme.json --dest /dump --post-hook "sh /hook.sh"
    restart: unless-stopped
    user: "{{uid}}:{{gid}}"
    labels:
      traefik.enable: false
    volumes:
      - {{project_root}}/base/traefik/acme:/data
      - {{project_root}}/base/traefik/dump:/dump
      - {{project_root}}:/lokal
      - {{project_root}}/base/dumper/hook.sh:/hook.sh
{% endif %}

  fail2ban:
    image: crazymax/fail2ban:latest
    # no user: "{{uid}}:{{gid}}" because it cannot bind socket /var/run/fail2ban/fail2ban.sock
    container_name: fail2ban
    network_mode: "host"
    depends_on:
    - traefik
    cap_add:
    - NET_ADMIN
    - NET_RAW
    volumes:
    - {{project_root}}/base/traefik/log/:/var/log/traefik/:ro
    - {{project_root}}/base/fail2ban/:/data/

  transmission:
    image: linuxserver/transmission
    container_name: transmission
#   no user: "{{uid}}:{{gid}}" because it drops the privileges itself
    environment:
      PUID: "{{uid}}"
      PGID: "{{gid}}"
      TZ: "{{tz}}"
    volumes:
    - {{project_root}}/base/transmission/config/:/config/
    - {{project_root}}/base/transmission/data/:/downloads/
    - {{project_root}}/base/transmission/watch/:/watch/
    ports:
    - 9091:9091
    - 51413:51413
    - 51413:51413/udp
    restart: unless-stopped
    networks:
    - traefik
    labels:
      traefik.enable: "true"
      traefik.http.routers.transmission.entrypoints: websecure
      traefik.http.routers.transmission.rule: Host(`{{subdomain_transmission}}.{{domain}}`)
      traefik.http.routers.transmission.tls: "true"
      traefik.http.services.transmission.loadbalancer.server.port: 9091
      traefik.http.routers.transmission.middlewares: admin-auth@file
{% if ssl_use_acme %}
      traefik.http.routers.transmission.tls.certresolver: {{cert_resolver}}
{% endif %}
