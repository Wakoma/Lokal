version: "3.8"

networks:
  traefik:
    name: traefik
  mysql:
    name: mysql
  prometheus:
    name: prometheus
  mail:
    name: mail
  postgres:
    name: postgres

services:
{% if debug_smtp %}
  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    networks:
      - traefik
      - mail
    labels:
      traefik.enable: "true"
      traefik.http.routers.mailhog.entrypoints: websecure
      traefik.http.routers.mailhog.rule: Host(`{{subdomain_mailhog}}.{{domain}}`)
      traefik.http.routers.mailhog.tls: "true"
      traefik.http.services.mailhog.loadbalancer.server.port: 8025
{% if server_is_live %}
      traefik.http.routers.mailhog.tls.certresolver: {{cert_resolver}}
{% endif %}
{% if traefik_basicauth_users is truthy %}
      traefik.http.routers.mailhog.middlewares: traefik-auth
{% endif %}
    restart: unless-stopped
{% endif %}

  fail2ban:
    image: crazymax/fail2ban:latest
    network_mode: "host"
    cap_add:
    - NET_ADMIN
    - NET_RAW
    volumes:
    - /var/log:/var/log:ro
    - {{project_root}}/base/fail2ban/data:/data

  mariadb:
    container_name: {{mysql_host}}
    image: mariadb:{{version_mariadb}}
    user: "{{uid}}:{{gid}}"  # run the container service as app user (not root)
    environment:
      MYSQL_ROOT_PASSWORD: {{mysql_root_password}}
      MARIADB_MYSQL_LOCALHOST_USER: "true"
    ports:
    - '{{mysql_port}}:3306'  # necessary to manipulate mariadb locally
    networks:
    - mysql
    - prometheus
    healthcheck:
      test: mysql --protocol tcp -u root --password={{mysql_root_password}} -e "SELECT 1 FROM DUAL" mysql
      interval: 60s
      retries: 5
      start_period: 5s
      timeout: 1s
    restart: unless-stopped
    volumes:
    - {{project_root}}/base/mysql/data:/var/lib/mysql

  postgres:
    container_name: postgres
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: {{postgres_root_password}}
    ports:
    - '{{postgres_port}}:5432'
    networks:
    - postgres
    - prometheus
    restart: unless-stopped
    volumes:
    - {{project_root}}/base/postgres/data:/var/lib/postgresql/data

  grafana:
    container_name: grafana
    image: grafana/grafana:{{version_grafana}}
    user: "{{uid}}:{{gid}}"
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel,natel-discrete-panel,grafana-piechart-panel
#     GF_AUTH_DISABLE_LOGIN_FORM: "true"
#     GF_AUTH_ANONYMOUS_ENABLED: "true"
#     GF_AUTH_ANONYMOUS_ORG_NAME: Main Org.
#     GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
#     GF_USERS_ALLOW_SIGN_UP: "false"
#     GF_LOG_LEVEL: debug
    labels:
      traefik.enable: "true"
      traefik.http.routers.grafana.entrypoints: websecure
      traefik.http.routers.grafana.rule: Host(`{{subdomain_grafana}}.{{domain}}`)
      traefik.http.routers.grafana.tls: "true"
      traefik.http.routers.grafana.middlewares: authelia@docker
      traefik.http.services.grafana.loadbalancer.server.port: 3000
{% if server_is_live %}
      traefik.http.routers.grafana.tls.certresolver: {{cert_resolver}}
{% endif %}
    volumes:
      - {{project_root}}/base/grafana/data:/var/lib/grafana
    networks:
      - traefik
      - prometheus
      - mail
    restart: unless-stopped

  prometheus:
    container_name: prometheus
    image: prom/prometheus:{{version_prometheus}}
    user: "{{uid}}:{{gid}}"
    labels:
      traefik.enable: "true"
      traefik.http.routers.prometheus.entrypoints: websecure
      traefik.http.routers.prometheus.rule: Host(`{{subdomain_prometheus}}.{{domain}}`)
      traefik.http.routers.prometheus.tls: "true"
      traefik.http.services.prometheus.loadbalancer.server.port: 9090
{% if traefik_basicauth_users is truthy %}
      traefik.http.routers.prometheus.middlewares: traefik-auth
{% endif %}
{% if server_is_live %}
      traefik.http.routers.prometheus.tls.certresolver: {{cert_resolver}}
{% endif %}
    networks:
    - traefik
    - prometheus
    restart: unless-stopped
    volumes:
    - {{project_root}}/base/prometheus/etc:/etc/prometheus
    - {{project_root}}/base/prometheus/data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml

  ldap:
    image: bitnami/openldap:2
    container_name: ldap
    # ports:
    #   - '1389:1389'
    #   - '1636:1636'
    environment:
      LDAP_ADMIN_USERNAME: admin
      LDAP_PORT_NUMBER: 1389
      LDAP_ROOT: dc=lokal
      LDAP_ADMIN_PASSWORD: "{{password_auth}}"
      #LDAP_USERS: user01,user02
      #LDAP_PASSWORDS: bitnami1,bitnami2
    networks:
      - traefik
    volumes:
      - '{{project_root}}/base/ldap/data:/bitnami/openldap'

  authelia:
    container_name: authelia
    image: authelia/authelia
    restart: unless-stopped
    depends_on:
      - ldap
    networks:
      - traefik
    # expose:
    #   - 9091
    volumes:
      - {{project_root}}/base/authelia/data:/config
    environment:
      TZ: "{{tz}}"
      AUTHELIA_JWT_SECRET: "{{jwt_secret_authelia}}"
      AUTHELIA_SESSION_SECRET: "{{session_secret_authelia}}"
      # AUTHELIA_STORAGE_PASSWORD: "{{storage_password_authelia}}"
      # AUTHELIA_STORAGE_ENCRYPTION_KEY: "{{storage_encryption_key_authelia}}"
    labels:
      traefik.enable: true
      traefik.http.routers.authelia.rule: Host(`auth.{{domain}}`)
      traefik.http.routers.authelia.entryPoints: websecure
      traefik.http.routers.authelia.tls: true
      traefik.http.middlewares.authelia.forwardAuth.address: http://authelia:9091/api/verify?rd=https%3A%2F%2Fauth.{{domain}}%2F
      traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader: true
      traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders: Remote-User,Remote-Groups,Remote-Name,Remote-Email
      traefik.http.middlewares.authelia-basic.forwardAuth.address: http://authelia:9091/api/verify?auth=basic
      traefik.http.middlewares.authelia-basic.forwardAuth.trustForwardHeader: true
      traefik.http.middlewares.authelia-basic.forwardAuth.authResponseHeaders: Remote-User,Remote-Groups,Remote-Name,Remote-Email

  lam:
    image: ldapaccountmanager/lam
    user: "{{uid}}:{{gid_docker}}"
    hostname: ldap.{{domain}}
    depends_on:
      - ldap
    networks:
      - traefik
    environment:
      VIRTUAL_HOST: ldap.{{domain}} 
      # If set to true the other variables below have no effect.
      LAM_SKIP_PRECONFIGURE: "false"
      LDAP_DOMAIN: "{{domain}}"
      LDAP_SERVER: ldap://ldap:1389
      # LDAP admin user (set as login user for LAM)
      LDAP_USER: cn=admin,dc=lokal
      LAM_LANG: en_US
      LAM_PASSWORD: "{{password_lam}}"
      LAM_CONFIGURATION_DATABASE: files
      LAM_DISABLE_TLS_CHECK: "{{server_is_live | to_json}}"
      LDAP_ORGANISATION: "LDAP Account Manager Demo"
      LDAP_ADMIN_PASSWORD: "{{password_auth}}"
    volumes:
      - "{{project_root}}/base/lam/data:/var/lib/ldap-account-manager/config"
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.rule: Host(`{{subdomain_traefik}}.{{domain}}`)
      traefik.http.routers.traefik.tls: "true"
      traefik.http.services.traefik.loadbalancer.server.port: 80

  traefik:
    image: traefik:{{version_traefik}}
    # cannot be simply app_user:app_user because of root:docker privileges on /var/run/docker.sock
    user: "{{uid}}:{{gid_docker}}"  # run the container service as app user (not root)
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.rule: Host(`{{subdomain_traefik}}.{{domain}}`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.tls: "true"
      traefik.http.services.traefik.loadbalancer.server.port: 8080
{% if server_is_live %}
      traefik.http.routers.traefik.tls.certresolver: {{cert_resolver}}
{% endif %}
    networks:
    - traefik
    - prometheus
    ports:
    - 80:80
    - 443:443
    restart: unless-stopped
    depends_on:
    - authelia
    environment:
      CERT_RESOLVER: {{cert_resolver}}
{% if cert_resolver == "dns" and dns_provider == "namecheap" %}
      NAMECHEAP_API_USER: {{namecheap_api_user}}
      NAMECHEAP_API_KEY: {{namecheap_api_key}}
{% endif %}
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - "{{project_root}}/base/traefik/log:/var/log"  # used for fail2ban
    - "{{project_root}}/base/traefik/acme:/acme"
    - "{{project_root}}/base/traefik/certs:/certs"
    - "{{project_root}}/base/traefik/conf:/config"
    command:
    - --accessLog=true
    - --api.insecure=false
    - --api.dashboard=true
    - --api.debug=false
    - --certificatesResolvers.dns.acme.dnsChallenge.delayBeforeCheck=60
    - --certificatesResolvers.dns.acme.dnsChallenge.provider={{dns_provider}}
    - --certificatesResolvers.dns.acme.email={{email_acme}}
    - --certificatesResolvers.dns.acme.storage=/acme/acme.json
    - --certificatesresolvers.http.acme.httpchallenge=true
    - --certificatesresolvers.http.acme.httpchallenge.entrypoint=web
    - --certificatesresolvers.http.acme.email={{email_acme}}
    - --certificatesresolvers.http.acme.storage=/acme/acme.json
{% if staging_acme %}
    - --certificatesresolvers.http.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
{% endif %}
    - --certificatesresolvers.tls.acme.tlschallenge=true
    - --certificatesresolvers.tls.acme.email={{email_acme}}
    - --certificatesresolvers.tls.acme.storage=/acme/acme.json
{% if staging_acme %}
    - --certificatesresolvers.tls.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
{% endif %}
    - --entrypoints.web.address=:80
    - --entrypoints.websecure.address=:443/tcp
    - --entryPoints.metrics.address=:8082
    - --entrypoints.web.http.redirections.entryPoint.to=websecure
    - --entrypoints.web.http.redirections.entryPoint.scheme=https
    - --entrypoints.web.http.redirections.entrypoint.permanent=true
    ## Please see the Forwarded Header Trust section of the Authelia Traefik Integration documentation.
    - --entryPoints.websecure.forwardedHeaders.trustedIPs=10.0.0.0/8,172.16.0.0/16,192.168.0.0/16,fc00::/7
    - --entryPoints.websecure.proxyProtocol.trustedIPs=10.0.0.0/8,172.16.0.0/16,192.168.0.0/16,fc00::/7
    - --entryPoints.websecure.forwardedHeaders.insecure=false
    - --entryPoints.websecure.proxyProtocol.insecure=false
    - --log.level=WARNING
    - --accessLog.filePath=/var/log/access.log
    - --accessLog.filters.statusCodes=400-505
    - --metrics.prometheus=true
    - --metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000
    - --metrics.prometheus.addEntryPointsLabels=true
    - --metrics.prometheus.addServicesLabels=true
    - --metrics.prometheus.entryPoint=metrics
    - --providers.docker=true
    - --providers.docker.endpoint=unix:///var/run/docker.sock
    - --providers.docker.exposedbydefault=false
    - --providers.docker.network=traefik
    - --serversTransport.insecureSkipVerify=true
{% if static_certificate is truthy %}
    - --providers.file.directory=/config
    - --providers.file.watch=true
{% endif %}

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    user: "{{uid}}:{{gid_docker}}"
    restart: unless-stopped
    security_opt:
    - no-new-privileges:true
    volumes:
    - /etc/localtime:/etc/localtime:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - {{project_root}}/base/portainer/data:/data
    networks:
    - prometheus
    - traefik
    labels:
      traefik.enable: "true"
      traefik.http.routers.portainer.entrypoints: websecure
      traefik.http.routers.portainer.rule: Host(`{{subdomain_portainer}}.{{domain}}`)
      traefik.http.routers.portainer.tls: "true"
      traefik.http.services.portainer.loadbalancer.server.port: 9000
{% if server_is_live %}
      traefik.http.routers.portainer.tls.certresolver: {{cert_resolver}}
{% endif %}

  transmission:
    image: linuxserver/transmission
    container_name: transmission
#   no user: "{{uid}}:{{gid}}" because it drops the privileges itself
    environment:
      PUID: "{{uid}}"
      PGID: "{{gid}}"
      TZ: "{{tz}}"
    volumes:
    - {{project_root}}/base/transmission/config:/config
    - {{project_root}}/base/transmission/data:/downloads
    - {{project_root}}/base/transmission/watch:/watch
    ports:
    - 9091:9091
    - 51413:51413
    - 51413:51413/udp
    restart: unless-stopped
    depends_on:
    - traefik
    networks:
    - traefik
    labels:
      traefik.enable: "true"
      traefik.http.routers.transmission.entrypoints: websecure
      traefik.http.routers.transmission.rule: Host(`{{subdomain_transmission}}.{{domain}}`)
      traefik.http.routers.transmission.tls: "true"
      traefik.http.services.transmission.loadbalancer.server.port: 9091
{% if server_is_live %}
      traefik.http.routers.transmission.tls.certresolver: {{cert_resolver}}
{% endif %}
{% if traefik_basicauth_users is truthy %}
      traefik.http.routers.transmission.middlewares: traefik-auth
{% endif %}