---
- name: Docker-compose destination file
  ansible.builtin.set_fact:
    app_root: "{{project_root}}/wordpress"
    docker_compose_wordpress: "{{project_root}}/wordpress/docker-compose.yml"
    is_installed_wordpress: true

- name: Check docker-compose file existence
  ansible.builtin.set_fact:
    is_installed_wordpress: false
  when: docker_compose_wordpress is file

# If the docker-compose does not exist then proceed with normal installation
- name: Install app if it does not exist
  include_role: {name: common, tasks_from: install}
  vars:
    app: wordpress
    mysql_user: "{{mysql_user_wordpress}}"
    mysql_password: "{{mysql_password_wordpress}}"
    mysql_db: "{{mysql_database_wordpress}}"
    data_dirs:
    - app
    - data
  when: not is_installed_wordpress

# Upgrade tasks (all under when: is_installed_wordpress)
- name: Get the current app version (could have been upgraded via web)
  ansible.builtin.shell:
    cmd: docker-compose exec wordpress grep 'wp_version\s*=' wp-includes/version.php
    chdir: "{{ app_root }}"
    removes: docker-compose.yml  # runs only when this file exists
  ignore_errors: yes # in case of corrupted docker-compose.yml this would interrupt the whole playbook
  register: version_output
  when: is_installed_wordpress

- name: Parse out the version
  ansible.builtin.set_fact:
    version_runtime_wordpress: "{{version_output.stdout|regex_search('([\\d\\.]+)')}}"
  when: is_installed_wordpress

- name: Upgrade app (if version_wordpress is newer than already running version)
  ansible.builtin.include_tasks:
    file: upgrade.yml
  when: is_installed_wordpress and version_runtime_wordpress is truthy and version_runtime_wordpress is version(version_wordpress, '<')
