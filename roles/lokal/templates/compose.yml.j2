version: "3.8"

networks:
  traefik:
    name: traefik
  mysql:
    name: mysql
  prometheus:
    name: prometheus


services:
  grafana:
    container_name: grafana
    image: grafana/grafana:7.3.7
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel,natel-discrete-panel,grafana-piechart-panel
    labels:
      traefik.enable: "true"
      traefik.http.routers.grafana.entrypoints: websecure
      traefik.http.routers.grafana.rule: Host(`{{subdomain_grafana}}.{{domain}}`)
      traefik.http.routers.grafana.tls: "true"
      traefik.http.services.grafana.loadbalancer.server.port: 3000
      {% if server_is_live %}
      traefik.http.routers.grafana.tls.certresolver: {{cert_resolver}}
      {% endif %}
    volumes:
      - {{project_root}}/grafana/data:/var/lib/grafana:rw
    networks:
      - traefik
      - prometheus
    restart: unless-stopped

  netdata:
    container_name: netdata
    cap_add:
    - SYS_PTRACE
    environment:
      PUID: '{{ ansible_facts["user_uid"] }}'
    hostname: {{subdomain_netdata}}.{{domain}}
    image: netdata/netdata:v1.28.0-amd64
    labels:
      traefik.enable: "true"
      traefik.http.routers.netdata.entrypoints: websecure
      traefik.http.routers.netdata.rule: Host(`{{subdomain_netdata}}.{{domain}}`)
      traefik.http.routers.netdata.tls: "true"
      traefik.http.services.netdata.loadbalancer.server.port: 19999
      {% if server_is_live %}
      traefik.http.routers.netdata.middlewares: traefik-auth
      traefik.http.routers.netdata.tls.certresolver: {{cert_resolver}}
      {% endif %}
    networks:
      - traefik
      - prometheus
    restart: unless-stopped
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.24.1
    labels:
      traefik.enable: "true"
      traefik.http.routers.prometheus.entrypoints: websecure
      traefik.http.routers.prometheus.rule: Host(`{{subdomain_prometheus}}.{{domain}}`)
      traefik.http.routers.prometheus.tls: "true"
      traefik.http.services.prometheus.loadbalancer.server.port: 9090
      {% if server_is_live %}
      traefik.http.routers.prometheus.middlewares: traefik-auth
      traefik.http.routers.prometheus.tls.certresolver: {{cert_resolver}}
      {% endif %}
    networks:
      - traefik
      - prometheus
    restart: unless-stopped
    volumes:
      - {{project_root}}/prometheus/etc:/etc/prometheus
      - {{project_root}}/prometheus/data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml

  traefik:
    container_name: traefik
    image: traefik:v2.3.6
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.rule: Host(`{{subdomain_traefik}}.{{domain}}`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.tls: "true"
      traefik.http.services.traefik.loadbalancer.server.port: 8080
      {% if server_is_live %}
      traefik.http.middlewares.traefik-auth.basicauth.users: {{traefik_basicauth_users}}
      traefik.http.routers.traefik.middlewares: traefik-auth
      traefik.http.routers.traefik.tls.certresolver: {{cert_resolver}}
      {% endif %}
    networks:
      - traefik
      - prometheus
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    {% if server_is_live %}
      - {{project_root}}/traefik/config/live/dynamic.yml:/config/live.yml
      - {{project_root}}/traefik/config/local/dynamic.yml:/config/local.yml
      - ./acme:/acme
      - ./config/services/traefik/certs:/certs
    command:
      - --accessLog=true
      - --api.insecure=false
      - --api.dashboard=true
      - --api.debug=false
      - --certificatesResolvers.dns.acme.dnsChallenge.delayBeforeCheck=60
      - --certificatesResolvers.dns.acme.dnsChallenge.provider={{dns_provider}}
      - --certificatesResolvers.dns.acme.email={{acme_email}}
      - --certificatesResolvers.dns.acme.storage=/acme/acme.json
      - --certificatesresolvers.http.acme.httpchallenge=true
      - --certificatesresolvers.http.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.http.acme.email={{acme_email}}
      - --certificatesresolvers.http.acme.storage=/acme/acme.json
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entryPoints.metrics.address=:8082
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --log.level=WARNING
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
      - --metrics.prometheus.entryPoint=metrics
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=traefik
      - --providers.file.directory=/config
      - --providers.file.watch=true
      - --serversTransport.insecureSkipVerify=true
    environment:
      - NAMECHEAP_API_USER
      - NAMECHEAP_API_KEY
    {% endif %}

  mariadb:
    container_name: {{mysql_host}}
    image: mariadb:10.5.8-focal
    environment:
      MYSQL_ROOT_PASSWORD: {{mysql_root_password}}
    ports:
      - 3306:3306  # necessary to manipulate mariadb locally
    networks:
      - mysql
      - prometheus
    restart: unless-stopped
    volumes:
      - {{project_root}}/mysql/data:/var/lib/mysql

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - {{project_root}}/portainer/data:/data
    networks:
      - prometheus
      - traefik
    labels:
      traefik.enable: "true"
      traefik.http.routers.portainer.entrypoints: websecure
      traefik.http.routers.portainer.rule: Host(`{{subdomain_portainer}}.{{domain}}`)
      traefik.http.routers.portainer.tls: "true"
      traefik.http.services.portainer.loadbalancer.server.port: 9000
      {% if server_is_live %}
      traefik.http.routers.portainer.tls.certresolver: {{cert_resolver}}
      {% endif %}

  transmission:
    image: linuxserver/transmission
    container_name: transmission
    environment:
      PUID: '{{ ansible_facts["user_uid"] }}'
      PGID: '{{ ansible_facts["user_gid"] }}'
      TZ: '{{ ansible_facts["date_time"]["tz"] }}'
    volumes:
      - {{project_root}}/transmission/config:/config
      - {{project_root}}/transmission/data:/downloads
      - {{project_root}}/transmission/watch:/watch
    ports:
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
    depends_on:
      - traefik
    networks:
      - traefik
    labels:
      traefik.enable: "true"
      traefik.http.routers.transmission.entrypoints: websecure
      traefik.http.routers.transmission.rule: Host(`{{subdomain_transmission}}.{{domain}}`)
      traefik.http.routers.transmission.tls: "true"
      traefik.http.services.transmission.loadbalancer.server.port: 9091

  jellyfin:
    image: linuxserver/jellyfin
    container_name: jellyfin
    environment:
      PUID: '{{ ansible_facts["user_uid"] }}'
      PGID: '{{ ansible_facts["user_gid"] }}'
      TZ: '{{ ansible_facts["date_time"]["tz"] }}'
      JELLYFIN_PublishedServerUrl: https://{{subdomain_jellyfin}}.{{domain}}
    volumes:
      - {{project_root}}/jellyfin/config:/config
      - {{project_root}}/jellyfin/data:/data
      - {{project_root}}/transmission/data:/downloads:ro
    ports:
      - 7359:7359/udp
      # - 1900:1900/udp  # Can't be used at 1900 because that clashes with unif-controller
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.jellyfin.entrypoints: websecure
      traefik.http.routers.jellyfin.rule: Host(`{{subdomain_jellyfin}}.{{domain}}`)
      traefik.http.routers.jellyfin.tls: "true"
      traefik.http.services.jellyfin.loadbalancer.server.port: 8096
    networks:
      - traefik
