- name: List possible backup files
  ansible.builtin.find:
    paths: "{{backup_root}}/{{app}}"
    file_type: directory
  register: available_backups

- name: Get the latest backup
  ansible.builtin.set_fact:
    latest_backup: "{{ available_backups.files | sort(attribute='mtime',reverse=true) | first }}"

- name: Fail if there is no backup
  ansible.builtin.fail:
    msg: No backup found
  when: latest_backup is falsy

- name: "Stop {{ app }} service"
  ansible.builtin.shell:
    cmd: "docker compose down"
    chdir: "{{project_root}}/{{app}}"
  ignore_errors: yes

- name: "Restore {{ app }} data from {{ latest_backup.path }}"
  ansible.builtin.shell:
    cmd: "tar -xzf {{latest_backup.path}}/files.tgz"
    chdir: "{{project_root}}/{{app}}"
  become: yes

- name: "Uzip {{app}} MySQL dump file"
  ansible.builtin.shell:
    cmd: "zcat {{latest_backup.path}}/mysql.sql.gz > {{project_root}}/base/mariadb/{{app}}.sql"
    chdir: "{{project_root}}/base"
  when: mysql_db is defined

- name: "Restore {{app}} MySQL tables"
  ansible.builtin.shell:
    cmd: "docker compose exec mariadb mysql -u root --password={{mysql_root_password}} -f -e 'source /var/lib/mysql/{{app}}.sql' {{mysql_db}}"
    chdir: "{{project_root}}/base"
  when: mysql_db is defined

- name: "Delete ucompressed {{app}} MySQL dump file"
  ansible.builtin.file:
    path: "{{project_root}}/base/mariadb/{{app}}.sql"
    state: "absent"
  when: mysql_db is defined

- name: Restore PostgreSQL
  community.postgresql.postgresql_db:
    name: "{{postgres_db}}"
    login_host: postgres
    login_password: "{{postgres_root_password}}"
    login_port: "{{postgres_port}}"
    owner: "{{postgres_user}}"
    state: restore
    target: "{{backup_dir}}/postgres.sql.gz"
  when: postgres_db is defined

- name: "Start {{app}} again"
  ansible.builtin.shell:
    cmd: "docker compose up -d"
    chdir: "{{project_root}}/{{app}}"
