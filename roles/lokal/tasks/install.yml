---
- name: Export app_root variable
  ansible.builtin.set_fact:
    app_root: "{{project_root}}/{{app}}"

- name: Create {{app}} directory
  ansible.builtin.file:
    path: "{{app_root}}"
    state: directory

- name: Create {{app}} external data directories
  ansible.builtin.file:
    path: "{{item.value}}"
    state: directory
  loop: "{{linked_dirs | dict2items}}"
  when: linked_dirs is defined and linked_dirs|bool  # truthy does not stop None value?!

- name: Link {{app}} external directories
  ansible.builtin.file:
    path: "{{app_root}}/{{item.key}}"
    src: "{{item.value}}"
    state: link
  loop: "{{linked_dirs | dict2items}}"
  when: linked_dirs is defined and linked_dirs|bool

- name: Create {{app}} data directories
  ansible.builtin.file:
    path: "{{app_root}}/{{item}}"
    state: directory
  loop: "{{data_dirs}}"
  when: data_dirs is defined

- name: Get previous {{app}} version
  ansible.builtin.slurp:
    src: "{{app_root}}/version"
  register: version_file
  when: app_version is defined
  ignore_errors: true

- name: Parse previous {{app}} version
  ansible.builtin.set_fact:
    app_version_prev: "{{version_file['content'] | b64decode}}"
    app_updated: "{{(version_file['content'] | b64decode) is version(app_version, '<')}}"
  when: app_version is defined and version_file is defined and version_file.content is defined

- name: Set current {{app}} version
  ansible.builtin.copy:
    dest: "{{app_root}}/version"
    content: "{{app_version}}"
  when: app_version is defined

- name: "Call lokal/tasks/mysqldb/create.yml"
  ansible.builtin.include_tasks:
    file: mysqldb/create.yml
  when: mysql_db is defined

- name: "Call lokal/tasks/postgresqldb/create.yml"
  ansible.builtin.include_tasks:
    file: postgresqldb/create.yml
  when: postgres_db is defined

- name: Open {{app}} firewall ports
  become: true
  vars:
    firewall_group: "{{app}}"
    firewall_allowed_tcp_ports: "{{firewall_tcp}}"
    firewall_allowed_udp_ports: "{{firewall_udp}}"
    # firewall_restart_docker: true
  ansible.builtin.import_role:
    name: geerlingguy.firewall.d
  when: firewall_tcp is truthy or firewall_udp is truthy

- name: Render {{app}} docker-compose.yml
  ansible.builtin.template:
    src: "roles/{{app}}/templates/compose.yml"
    dest: "{{app_root}}/docker-compose.yml"
    mode: "0600"

# you can avoid starting the app defining "start: false" in `vars` section
- name: Docker-compose up
  ansible.builtin.shell:
    cmd: "docker compose up -d"
    chdir: "{{app_root}}"
  when: not start is defined or start is truthy  # start only when start: false is not a fact
  notify: "lokal : Restart router"

- name: Docker purge unused images
  ansible.builtin.shell: 
    cmd: docker image prune -f
    chdir: "{{app_root}}"
  when: app_version is defined and app_updated is defined and app_updated is truthy