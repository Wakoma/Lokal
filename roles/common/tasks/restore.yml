- name: List possible backup files
  ansible.builtin.find:
    paths: "{{backup_root}}/{{app}}"
    file_type: directory
  register: available_backups

- name: Get the latest backup
  ansible.builtin.set_fact:
    latest_backup: "{{ available_backups.files | sort(attribute='mtime',reverse=true) | first }}"

- name: Fail if there is no backup
  ansible.builtin.fail:
    msg: No backup found
  when: latest_backup is falsy

- name: "Stop the service"
  ansible.builtin.shell:
    cmd: "docker-compose down"
    chdir: "{{project_root}}/{{app}}"
  ignore_errors: yes

- name: "Restore data"
  ansible.builtin.shell:
    cmd: "tar -xzf {{latest_backup.path}}/files.tgz"
    chdir: "{{project_root}}/{{app}}"
  become: yes

- name: "Restore DB"
  community.mysql.mysql_db:
    state: import
    name: "{{db}}"
    target: database.sql.gz
    login_user: root
    login_password: "{{mysql_root_password}}"
    login_port: "{{mysql_port}}"
    login_host: localhost
    chdir: "{{latest_backup.path}}"
    force: yes
  when: db is defined

- name: "Start the service again"
  ansible.builtin.shell:
    cmd: "docker-compose up -d"
    chdir: "{{project_root}}/{{app}}"
